/**
 * –ù—É, —Å–æ–±—Å—Ç–Ω–∞, –Ω–∞ –ª–∏—Ç–∫–æ–¥–µ –Ω–µ–¥–∞–≤–Ω–æ –∫–æ–º–º–∏—Ç–∏–ª —Ä–æ–≤–Ω–æ —ç—Ç—É –∑–∞–¥–∞—á—É.
 * –ù–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω. indexOf –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ - –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º Map.has,
 * –æ–¥–Ω–∞–∫–æ Map.set –º–æ–∂–µ—Ç –Ω–∏–≤–µ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ. –î–∞ –∏ –ø—Ä–æ—Ö–æ–¥ –æ–¥–∏–Ω.
 * –Ω–∞ –ª–∏—Ç–∫–æ–¥–µ –±—ã–ª–æ 76–º—Å —Å —Ç–µ–º–∏ –∂–µ –≤–≤–æ–¥–Ω—ã–º–∏.
 *
 * –û—Ç–ª–∏—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –µ—Å—Ç—å –Ω–∞ –ª–∏—Ç–∫–æ–¥–µ! –µ—â–µ –±—ã –Ω–æ–º–µ—Ä–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–ªüòÖ
 */
function redundantLetter(str1, str2) {
  for (let i = 0; i < str2.length; i++) {
    if (str1.indexOf(str2[i]) === -1) {
      return str2[i];
    }
    str1 = str1.replace(str2[i], '');
  }
}

const reader = require('readline').createInterface({
  input: process.stdin,
});
const inputLines = [];
reader.on('line', line => {
  inputLines.push(line);
});
process.stdin.on('end', () => {
  let res = redundantLetter(inputLines[0], inputLines[1]);
  process.stdout.write(res + '');
  process.exit();
});
